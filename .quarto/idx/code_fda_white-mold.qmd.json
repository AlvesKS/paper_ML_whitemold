{"title":"Functional data analysis","markdown":{"yaml":{"title":"Functional data analysis"},"headingText":"Functional data analysis","containsRefs":false,"markdown":"\n\n\n## Libraries\n\n::: callout-warning\n# About R packages\n\nMake sure to have all R packages installed before running the analysis described in this website.\n:::\n\n```{r message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(cowplot)\nlibrary(lemon)\nlibrary(ggthemes)\nlibrary(patchwork)\nlibrary(mgcv)\nlibrary(mgcViz)\nlibrary(itsadug)\nlibrary(tidymv)\ntheme_set(theme_half_open(font_size = 12))\n```\n\n```{r eval=TRUE, include=FALSE}\nlibrary(knitr)\n\nknit_print.data.frame <- function (x, options, ...) {\n  rmarkdown::paged_table(x, options) %>% \n    rmarkdown:::print.paged_df()\n}\n\nregisterS3method(\"knit_print\", \"data.frame\", knit_print.data.frame)\n```\n\n# Load Data\n\n::: {.callout-warning}\n\n# About the Data\n\nIn the research [repository](https://osf.io/v53py/){target=\"_blank\"}, the directories containing the soil, weather, white mold are compressed (`data_era5.zip`,`soil_images.zip`, `data_white-mold.zip`). You should unzip these files in the main directory to be able to reproduce the analysis.\n\n:::\n\n\n```{r}\nwm_load = read.csv(\"data_white-mold/data_model_plus_weather_filtered.csv\")\nhead(wm_load)\n\n```\n\n```{r}\nwm_datax = wm_load %>%\n  #transform these columns into Date format\n  mutate(date = as.Date(date),\n         sampling.date =  as.Date(sampling.date),\n         planting.date = as.Date(planting.date)) %>% \n  \n  # Calculate dap\n  mutate(dap = date-planting.date) %>% \n  \n  # Calculating temperatures in degrees Celsius \n  mutate(d2m = d2m-273.15,\n         t2m_mean = t2m_mean-273.15,\n         t2m_max = t2m_max-273.15,\n         t2m_min = t2m_min-273.15,\n         st = st-273.15) %>% \n  # dewpoint depression\n  mutate(dpd = t2m_mean - d2m) %>% \n  # growing degree days (base 0)\n  mutate(gddi = ((t2m_max +t2m_min)*0.5)-0) %>% \n  group_by(subject) %>% \n  mutate(gdd = cumsum(gddi)) %>% \n  \n  group_by(subject) %>% \n  mutate(wm = (mean(wm, na.rm =T)>0)*1) %>% \n  ungroup() %>% \n  filter(!is.na(wm)) \n\n  \nwm_datax\n\n```\n\n```{r}\nwm_datax %>% \n  filter(!is.na(wm)) %>% \n  group_by(subject) %>% \n  group_by(subject, dap) %>% \n  slice(1L) %>% \n  mutate(S = wm) %>% \n  filter(dap<=50) %>% \n  group_by(subject) %>% \n  summarise(max_dap = max(dap)) %>% \n  arrange(max_dap)\n```\n\n```{r}\nwm_datax %>% \n  group_by(subject) %>% \n  summarise(dap = as.numeric(max(dap))) %>% \n  ungroup() %>% \n  summary()\n  # ggplot(aes(dap))+\n  # geom_density()+\n  # theme(axis.text.y = element_blank())\n```\n\n```{r}\nwm_datax %>% \n  filter(!is.na(gscat)) %>% \n  group_by(subject, gscat) %>% \n  summarise(dap = max(dap)) %>% \n  ggplot(aes(dap, reorder(gscat, dap), fill= gscat))+\n  ggdist::stat_halfeye()+\n  scale_fill_calc()+\n  background_grid(size.major = 0.1)+\n  scale_x_continuous(breaks = seq(15, 80, 5))+\n  labs(x =  \"Days after planting\",\n       y = \"Phenological state\",\n       fill = \"\")\nggsave(\"figs/fda_figs/phonology.png\", dpi=900, height = 3,width = 6,bg= \"white\" )\n```\n\n```{r}\nwm_data = wm_datax%>% \n  group_by(subject) %>% \n  filter(sampling.date == max(sampling.date))\n\nwm_data %>% \n  group_by(subject) %>% \n  summarise(j = sampling.date == max(date)) %>% \n  ungroup() %>% \n  filter(j ==F)\n```\n\n```{r}\nwm_data %>% \n  group_by(subject) %>% \n  filter(`obs` == max(`obs`)) %>% \n  summarise((wm))\n```\n\n## Generalized additive models (GAM)\n\n### Example for RH\n\n-   Filtering data for until 60 days post planting\n\n```{r}\ngam_data = wm_data %>%\n  mutate(dap =as.numeric(dap),\n         wm = as.factor(wm)) %>% \n  filter(dap<=60)\n```\n\n#### Mixed-effect GAM model\n\n```{r}\ngam_mtemp = gam(rh ~ wm +s(dap, by =wm, bs = \"bs\", m=4, k =17 )+ s(subject, bs=\"re\") + s(subject,dap, bs = \"re\"),\n                method = \"REML\",\n                 data = gam_data )\n\nsummary(gam_mtemp)\n```\n\n#### Predicting curves\n\n```{r}\n\npredict_gam(gam_mtemp ,\n            exclude_terms = list(\"s(subject)\", \"s(subject,dap)\" ),\n            values = list(subject = NULL)) %>%\n  # filter(subject == 1)+\n  ggplot(aes(dap,fit, color = wm, fill = wm))+\n  annotate(\"rect\",ymin = -Inf, ymax = Inf, xmin = 35, xmax = 50, fill = \"steelblue\", alpha = 0.2)+\n  geom_vline(xintercept = 0, color = \"gray\", linetype = \"dashed\")+\n  geom_ribbon(aes( ymin= fit - 1.96*se.fit, ymax = fit + 1.96*se.fit),\n              linetype =0, \n              alpha = 0.1)+\n  geom_line(size = 1 )+\n  scale_x_continuous(breaks = seq(-30, 70, by =10))+\n  scale_color_colorblind(labels = c( \"Non-prevalent\",\"Prevalent\"))+\n  scale_fill_colorblind(labels = c( \"Non-prevalent\",\"Prevalent\"))+\n  labs(x = \"Days relative to planting date\",\n       fill = \"\",\n       color =\"\")+\n  theme(legend.position = \"top\")\n```\n\n#### Get differences\n\n```{r}\ngg_temp_diff= get_smooths_difference(gam_mtemp, dap, list(wm = c(\"1\", \"0\")), series_length = 500)\n\n\n\ngg_temp_diff %>%\n  ggplot(aes(dap, difference, group = group))+\n  annotate(\"rect\",ymin = -Inf, ymax = Inf, xmin = 35, xmax = 50, fill = \"steelblue\", alpha = 0.2)+\n  \n  geom_vline(xintercept = 0, color = \"gray\", linetype = \"dashed\")+\n  geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper, fill = sig_diff), alpha = 1)+\n  geom_line(size =1, color = \"white\")+\n  geom_hline(yintercept = 0, color = \"gray\", linetype = \"dashed\")+\n  # scale_fill_colorblind()+\n  scale_fill_manual(values = c(\"black\", \"red\"))+\n  scale_x_continuous(breaks = seq(-30, 70, by =10))+\n  labs(x = \"Days relative to planting date\",\n       y = \"Difference\",\n       fill = \"\",\n       color =\"\")\n \n# ggsave(\"figs/diff_gam.png\", dpi = 600, width = 6, height = 3, bg = \"white\") \n```\n\n## All variables\n\nDefining variable names for graphs\n\n```{r}\nvars = c(\"d2m\", \"t2m_mean\" ,\"t2m_max\" , \"t2m_min\" ,\"st\",\"sm\" ,\"sp\" ,\"rh\" )\n\nvar_fulnames = c(\"Dew point (°C)\",\"Mean temperature (°C)\", \"Max. temperature (°C)\",\"Min. temperature (°C)\",\"Soil temperature (°C)\",\"Soil Moisture (m³/m³)\", \"Surface pressure (Pa)\",\"Relative Humidity (%)\")\n\n# \"gdd\",\"Growing degree days\",\n```\n\nThis is a function we built for fitting the GAM model for each variable. Then we use the `lapply()` function to run it to all variables and store into a `list` object.\n\n```{r}\nglmvars = function(var, data){\n  \nform =   as.formula(\n  paste(var,\"~wm +s(dap, by =wm, bs = 'bs', m=4, k =17 )+ s(subject, bs='re') + s(subject,dap, bs = 're')\")\n  )\ngam_model = gam(form,\n                 # random = list(subject=~1),\n                method = \"REML\",\n                 data = data ) \n\nreturn(gam_model)\n \n}\n\ngam_list = lapply(vars,glmvars, gam_data )\nnames(gam_list) = vars\n```\n\n### Predicted curves\n\nThis function was designed to plot the predicted smooth curves for each variable.\n\n```{r}\nplot_curves_fda = function(i, model, var){\n  predict_gam(model[[i]] ,\n            exclude_terms = list(\"s(subject)\", \"s(subject,dap)\" ),\n            values = list(subject = NULL)) %>%\n  # filter(subject == 1)+\n  ggplot(aes(dap,fit, color = wm, fill = wm))+\n  annotate(\"rect\",ymin = -Inf, ymax = Inf, xmin = 35, xmax = 50, fill = \"#ce9ea1\", alpha = 0.3)+\n  geom_vline(xintercept = 0, color = \"black\", linetype = \"dashed\", size = 0.2)+\n  geom_ribbon(aes( ymin= fit - 1.96*se.fit, ymax = fit + 1.96*se.fit),\n              linetype =0, \n              alpha = 0.5)+\n  geom_line(size = .8)+\n  scale_color_colorblind(labels = c( \"Non-prevalent\",\"Prevalent\"))+\n  scale_fill_colorblind(labels = c( \"Non-prevalent\",\"Prevalent\"))+\n  scale_x_continuous(breaks = seq(-30, 60, by =15))+\n  scale_y_continuous(n.breaks = 5)+\n  labs(x = \"Days relative to planting date\",\n       y = paste(var[i]),\n       fill = \"\",\n       color =\"\",\n       title = paste(var[i]))+\n  theme(legend.position = \"top\")\n}\nX =1:length(vars)\n```\n\n##### Visualization\n\nHere we plot all the curves in a combo figure\n\n```{r}\ndo.call(patchwork::wrap_plots,\n        lapply(X, plot_curves_fda, model = gam_list, var = var_fulnames))+\n  plot_layout(guides = \"collect\",\n              ncol = 2)+\n  plot_annotation(tag_levels = \"A\")&\n  theme(axis.text = element_text(size=6),\n        axis.title = element_text(size=6),\n        plot.title = element_text(size=7),\n        legend.position = \"bottom\")\n\n#save figure\nggsave(\"figs/fda_figs/curves_gam_fda.png\", dpi = 600,  width = 5, height = 6, bg = \"white\") \n\n```\n\n#### Difference curves\n\nThis function get the difference between smooth curves and plot using `ggplot2()`.\n\n```{r}\nggplot_diff = function(i, model, var){\n  \nggdiff = get_smooths_difference(model[[i]], dap, list(wm = c(\"1\", \"0\")),series_length = 1500)\n\nggdiff %>%\n  ggplot(aes(dap, difference))+\n  annotate(\"rect\",ymin = -Inf, ymax = Inf, xmin = 35, xmax = 50, fill = \"#ce9ea1\", alpha = 0.3)+\n  geom_vline(xintercept = 0, color = \"black\", linetype = \"dashed\", size = 0.2)+\n  geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper, fill = sig_diff, group = group), alpha = 1)+\n  geom_line(size =0.5, color = \"white\")+\n  geom_hline(yintercept = 0, color = \"black\", linetype = \"dashed\", size = 0.2)+\n  scale_fill_manual(values = c(\"FALSE\" = \"#707181\",\n                              \"TRUE\" = \"steelblue\"))+##cd2b2d\n  scale_x_continuous(breaks = seq(-30, 60, by =15))+\n  labs(x = \"Days relative to planting date\",\n       y = \"Difference\",\n       title = var[[i]],\n       fill = \"Sig. Diff.\",\n       color =\"\")+\n  theme(plot.title = element_text(size = 12))\n\n}\nX =1:length(vars)\n\n```\n\n##### Visualization\n\n```{r fig.height=8, fig.width=6}\ndo.call(patchwork::wrap_plots,\n        lapply(X, ggplot_diff, model = gam_list, var = var_fulnames))+\n  plot_layout(guides = \"collect\",\n              ncol = 2)+\n  plot_annotation(tag_levels = \"A\")&\n  theme(axis.text = element_text(size=7),\n        axis.title = element_text(size=6),\n        plot.title = element_text(size=9),\n        legend.position = \"bottom\")\n\n# save figure\nggsave(\"figs/fda_figs/diff_gam.png\", dpi = 900, width = 5, height = 6, bg = \"white\") \n\n```\n\n## Saving data\n\nThis function store the difference values into a `data.frame`. We use the `lapply()` function to get the difference for the selected variables\n\n```{r}\ndiff_fun = function(i, model, var){\n difs =  get_smooths_difference(model[[i]], dap, list(wm = c(\"1\", \"0\")), series_length = 91) %>% \n    mutate(var = var[[i]])\nreturn(difs)\n}\n\nX =1:length(vars)\nall_diffs = bind_rows(lapply(X, diff_fun, gam_list,var = vars ))\nall_diffs\n```\n\nHere we save (using the `write.csv()` function) the data with the periods in time that we found significant differences between smoothed curves.\n\n```{r eval=FALSE, include=TRUE}\n\ngam_data %>% \n  dplyr::select(subject, dap, wm, d2m, t2m_mean, t2m_max, t2m_min, sp, sm, st, rh, dpd) %>% \n  pivot_longer(4:12, \n               values_to = \"value\",\n               names_to = \"var\") %>% \n  full_join(\n    all_diffs %>%\n      dplyr::select(dap,var, sig_diff)\n  ) %>% \n  write.csv(\"data_white-mold/data_fda_sig_diff.csv\",row.names = F)\n```\n\n```{r include=FALSE}\nfile = \"code_fda_white-mold_files/desktop.ini\"\nif (file.exists(file)) {\n unlink(file)\n cat(\"The file is deleted\")\n}\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"error":false,"eval":true,"cache":false,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"self-contained-math":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","self-contained":false,"css":["styles.css"],"toc":true,"output-file":"code_fda_white-mold.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"theme":{"light":"flatly","dark":"darkly"},"smooth-scroll":true,"title":"Functional data analysis"},"extensions":{"book":{"multiFile":true}}}}}